#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"
yellow="\033[1;33m"
reset="\033[0m"

if [ -z "$VERSION_EXECUTED" ]; then
  export VERSION_EXECUTED="true"
else
  echo "El script de versi贸n ya se ejecut贸 en este push."
  exit 0
fi

printf "\033[1;33m#\n"
printf "# Ejecutando el ng build y pasando el linter... \n#"
printf "\033[0m\n"
npx ng build  && npx pretty-quick --pattern "src/**/*.*(ts,html,scss)" --staged  && ng lint --fix

printf "\033[1;33m#\n"
printf "# Elevamos versionado del proyecto \n#"
printf "\033[0m\n"
branch=$(git symbolic-ref --short HEAD)
if [[ $branch == "test-husky" ]]; then
  git fetch origin $branch
  git merge origin/$branch
  npm run deploy:tag patch
else
  echo "no"
fi

if [ -z "$VERSION_EXECUTED" ]; then
  echo "El script de versi贸n no se ejecut贸 en este commit."
  exit 1
fi

action=$1 # patch, minor or major
tag=$(awk -F \" '/"version": ".+"/ { print $4; exit; }' package.json)

git add -A
git pull --ff-only origin $branch >/dev/null 2>&1

# Verifica si hay cambios en el repositorio
if ! git diff-index --quiet HEAD --; then
  git commit -m "CI/CD -> Create patch for $action"
fi

npm version "$action"
# Get app version
# Upload git changes to remote
git push
git push origin "v$tag"