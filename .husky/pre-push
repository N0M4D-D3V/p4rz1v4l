#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"
yellow="\033[1;33m"
reset="\033[0m"

if [ -z "$VERSION_EXECUTED" ]; then
  export VERSION_EXECUTED="true"
else
  echo "El script de versión ya se ejecutó en este push."
  exit 0
fi

# Comprueba si existe la etiqueta 'origin'
if git show-ref --tags | grep -q '\srefs/tags/origin$'; then
  echo "Existe una etiqueta llamada 'origin' en el repositorio. Por favor, elimínela o renómbrela antes de ejecutar este script."
  exit 1
fi

branch=$(git rev-parse --abbrev-ref HEAD)

if [ -z "$VERSION_EXECUTED" ]; then
  echo "El script de versión no se ejecutó en este commit."
  exit 1
fi

action=$1 # patch, minor or major
tag=$(grep -Eo '"version":\s*"[^"]+"' package.json | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')

# Actualiza la rama local con la opción --rebase
git add -A
git fetch origin $branch
git rebase origin/$branch

# Construye, ejecuta el linter y eleva el versionado del proyecto
printf "${yellow}#\n"
printf "# Ejecutando el ng build y pasando el linter... \n#"
printf "${reset}\n"
npx ng build && npx pretty-quick --pattern "src/**/*.*(ts,html,scss)" --staged && ng lint --fix

printf "${yellow}#\n"
printf "# Elevamos versionado del proyecto \n#"
printf "${reset}\n"
branch=$(git symbolic-ref --short HEAD)
if [[ $branch == "test-husky" ]]; then
  git fetch origin $branch
  git merge origin/$branch
  npm run deploy:tag patch
else
  echo "no"
fi

if [ -z "$VERSION_EXECUTED" ]; then
  echo "El script de versión no se ejecutó en este commit."
  exit 1
fi